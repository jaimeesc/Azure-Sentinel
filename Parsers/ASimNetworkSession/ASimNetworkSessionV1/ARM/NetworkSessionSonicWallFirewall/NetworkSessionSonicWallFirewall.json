{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "workspaceName": {
      "type": "string"
    },
    "location": {
      "type": "string"
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('workspaceName')]",
      "location": "[parameters('location')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "vimNetworkSessionSonicWallFirewall",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('workspaceName'))]"
          ],
          "properties": {
            "etag": "*",
            "displayName": "SonicWall Firewall Network Sessions",
            "category": "Security",
            "FunctionAlias": "vimNetworkSessionSonicWallFirewall",
            "query": "let NetworkParserSonicWallFirewall=(){\nCommonSecurityLog\n| where DeviceVendor==\"SonicWall\"\n// Splits the AdditionalExtensions into a list of name/value pairs by the delimiter (semi-colon)\n| extend KeyValuePairs = split(AdditionalExtensions, ';')\n// On each key value pair, creates Key and Value column. Then uses bag_pack() to create a dynamic property bag object from the key value pair.\n// Finally, make_bag() is used to create a dictionary from the bag object.\n| mv-apply KeyValuePairs on (\n extend KeyValue = split(KeyValuePairs, '=')\n| where array_length(KeyValue) == 2 and KeyValue[0] matches regex \"^[a-zA-Z0-9_]*$\" // Look for name=value and name must be alphanumeric.\n| extend Key = tostring(KeyValue[0]), Value = tostring(KeyValue[1])\n| extend p = bag_pack(tostring(Key), tostring(Value))\n| summarize b = make_bag(p)\n)\n// Using the bag_unpack plugin with the evaluate operator, unpack the bag into columns.\n| evaluate bag_unpack(b)\n// Split the AdditionalExtensions again by \";fw_action\" to help isolate the URL in the string, if one exists.\n| extend KeyValuePairs = tostring(split(AdditionalExtensions, ';fw_action')[0])\n| extend DPISSLURL = extract(@\"([^;]*\\\\.[^f][^w][^_]+)(?:;fw_[^;]+)?(;|$)\", 1, KeyValuePairs) // Overall works well, but some URLs get truncated.\n// This adds a column for LogMsgSeverity, using case() to map the ingested LogSeverity int value to a friendly string.\n| extend LogMsgSeverity = case(LogSeverity == 10, \"Emergency (0)\",\n  LogSeverity == 9, \"Alert (1)\",\n  LogSeverity == 8, \"Critical (2)\",\n  LogSeverity == 7, \"Error (3)\",\n  LogSeverity == 6, \"Warning (4)\",\n  LogSeverity == 5, \"Notice (5)\",\n  LogSeverity == 4, \"Info (6)/Debug (7)\",\n  LogSeverity == 3, \"Not Mapped (3)\",\n  LogSeverity == 2, \"Not Mapped (2)\",\n  LogSeverity == 1, \"Not Mapped (1)\",\n  \"Not Mapped\"\n  )\n// This adds a column for the HTTP \"RequestMethod\" column, using case() to map the ingested RequestMethod int value to a friendly string.\n| extend HTTPRequestMethod = case(RequestMethod == 0, \"No Operation (0)\",\n  RequestMethod == 1, \"HTTP GET (1)\",\n  RequestMethod == 2, \"HTTP POST (2)\",\n  RequestMethod == 3, \"HTTP HEAD (3)\",\n  \"\"\n  )\n// Renaming columns to friendlier names.\n| project-rename\nEventResourceId = _ResourceId\n, DeviceModel = DeviceProduct\n, FirmwareVersion = DeviceVersion\n, SerialNumber = Computer\n, LogMsgID = DeviceEventClassID\n, CEFLogMsgSeverity = LogSeverity\n, OutboundInterface = DeviceOutboundInterface\n, InboundInterface = DeviceInboundInterface\n, ApplicationID = ApplicationProtocol // Application ID number (when Flow Reporting is enabled).\n, CFSBlockFullString = Reason // CFS Block Category ID and Name\n// DeviceCustomStringX (csX=)\n, RuleDetails = DeviceCustomString1 // Rule ID. Identify a policy or rule associated with an event.\n, SourceVPNPolicyName = DeviceCustomString2 // Displays the source VPN policy name associated with the event.\n, DestinationVPNPolicyName = DeviceCustomString3 // Displays the destination VPN policy name associated with the event.\n, InterfaceStatistics = DeviceCustomString4 // Displays interface statistics.\n, SoleraNPCSURL = DeviceCustomString5 // URL. Applicable only when NPCS Solera is enabled. Displays the URL of an NPCS object.\n, LogMsgNote = DeviceCustomString6 // \"Note\" field. Additional information that is application-dependent.\n// DeviceCustomStringXLabel (csXLabel=)\n, NATSourceIPAddress = DeviceCustomString1Label // NAT'ed source IP4/IPv6 address.\n, NATDestinationIPAddress = DeviceCustomString2Label // NAT'ed destination IPv4/IPv6 address.\n, SourceZone = DeviceCustomString3Label // Source Zone on Gen7. Src Zone Type on Gen6.\n, DestinationZone = DeviceCustomString4Label // Destination Zone on Gen7. Dest Zone Type (Trusted/Untrusted, etc.) on Gen6.\n, UserSessionType = DeviceCustomString5Label // String indicating the user session type, determined by the auth mechanism.\n, UserSessionDuration = DeviceCustomString6Label // User session duration in seconds.\n// FieldDeviceCustomNumberX (cnX=)\n, ICMPType = FieldDeviceCustomNumber1 // ICMP Type\n, ICMPCode = FieldDeviceCustomNumber2 // ICMP Code\n// Handle the log group category mapping to a friendly value.\n| extend\n  gcat = column_ifexists(\"gcat\", 0) // If column doesn't exist, creates the column and sets it to 0. Also avoids errors if returned query is empty.\n, appcat = column_ifexists(\"appcat\", \"\") // Application Category from App Control. Sets an empty appcat column if column doesn't exist.\n, ipspri = column_ifexists(\"ipspri\", \"\")\n, spypri = column_ifexists(\"spypri\", \"\")\n| extend LogMsgCategory = case(gcat == 1, \"System (1)\",\ngcat == 2, \"Log (2)\",\ngcat == 3, \"Security Services (3)\",\ngcat == 4, \"Users (4)\",\ngcat == 5, \"Firewall Settings (5)\",\ngcat == 6, \"Network (6)\",\ngcat == 7, \"VPN (7)\",\ngcat == 8, \"High Availability (8)\",\ngcat == 9, \"3G/4G, Modem, and Module (9)\",\ngcat == 10, \"Firewall (10)\",\ngcat == 11, \"Wireless (11)\",\ngcat == 12, \"VoIP (12)\",\ngcat == 13, \"SSL VPN (13)\",\ngcat == 14, \"Anti-Spam (14)\",\ngcat == 15, \"WAN Acceleration (15)\",\ngcat == 16, \"SD-WAN (16)\",\ngcat == 17, \"Multi-Tenancy (17)\",\n\"Log Category Not Mapped\"\n)\n// Handle mapping of the legacy category if one is assigned.\n| extend LegacyMessageCategory = case(DeviceEventCategory == 0, \"None (0)\",\n  DeviceEventCategory == 1, \"System Maintenance (1)\",\n  DeviceEventCategory == 2, \"System Errors (2)\",\n  DeviceEventCategory == 4, \"Blocked Web Sites (4)\",\n  DeviceEventCategory == 8, \"Blocked Java Etc. (8)\",\n  DeviceEventCategory == 16, \"User Activity (16)\",\n  DeviceEventCategory == 32, \"Attacks (32)\",\n  DeviceEventCategory == 64, \"Dropped TCP (64)\",\n  DeviceEventCategory == 128, \"Dropped UDP (128)\",\n  DeviceEventCategory == 256, \"Dropped ICMP (256)\",\n  DeviceEventCategory == 512, \"Network Debug (512)\",\n  DeviceEventCategory == 1024, \"Connection Closed (1024)\",\n  DeviceEventCategory == 2048, \"Dropped LAN TCP (2048)\",\n  DeviceEventCategory == 4096, \"Dropped LAN UDP (4096)\",\n  DeviceEventCategory == 8192, \"Dropped LAN ICMP (8192)\",\n  DeviceEventCategory == 32768, \"Modem Debug (32768)\",\n  DeviceEventCategory == 65536, \"VPN Tunnel Status (65536)\",\n  DeviceEventCategory == 131072, \"IEEE 802.11 Management (131072)\",\n  DeviceEventCategory == 262144, \"Connection Opened (262144)\",\n  DeviceEventCategory == 524288, \"System Environment (524288)\",\n  DeviceEventCategory == 1048576, \"Expanded - VoIP Activity (1048576)\",\n  DeviceEventCategory == 2097152, \"Expanded - WLAN IDS Activity (2097152)\",\n  DeviceEventCategory == 4194304, \"Expanded - SonicPoint Activity (4194304)\",\n  \"Legacy Category Not Mapped\"\n  )\n// This adds a column for the IPS Priority level, using case() to map the ingested int value to a friendly string.\n| extend IPSPriority = case(ipspri == 1, \"High (1)\",\n  ipspri == 2, \"Medium (2)\",\n  ipspri == 3, \"Low (3)\",\n  \"\"\n  )\n// This adds a column for the Anti-Spyware Priority level, using case() to map the ingested int value to a friendly string.\n| extend AntiSpywarePriority = case(spypri == 1, \"High (1)\",\n  spypri == 2, \"Medium (2)\",\n  spypri == 3, \"Low (3)\",\n  \"\"\n  )\n// Creating a consistent set of columns that can be used later in the query and removed from view at the end.\n| extend\n  FieldDeviceCustomNumber1Label = column_ifexists(\"FieldDeviceCustomNumber1Label\", \"\") // FieldDeviceCustomNumberXLabel (cnXLabel=)\n, FieldDeviceCustomNumber2Label = column_ifexists(\"FieldDeviceCustomNumber2Label\", \"\") // FieldDeviceCustomNumberXLabel (cnXLabel=)\n, DeviceCustomNumber1Label = column_ifexists(\"DeviceCustomNumber1Label\", \"\") // DeviceCustomNumberXLabel (cnXLabel=)\n, DeviceCustomNumber2Label = column_ifexists(\"DeviceCustomNumber2Label\", \"\") // DeviceCustomNumberXLabel (cnXLabel=)\n, DeviceCustomNumber3Label = column_ifexists(\"DeviceCustomNumber3Label\", \"\") // Connection Duration in milliseconds (for Connnection Closed msgs)\n, fw_action = column_ifexists(\"fw_action\", \"\") // Firewall Action, such as drop, forward, mgmt, NA\n, susr = column_ifexists(\"susr\", \"\") // Logged-in username associated with the log event.\n, srcV6 = column_ifexists(\"srcV6\", \"\") // Source IPv6 IP\n, dstV6 = column_ifexists(\"dstV6\", \"\") // Destination IPv6 IP\n, appName = column_ifexists(\"appName\", \"\") // Non-signature Application name that matches the Application ID \"app\" or \"f\".\n, app = column_ifexists(\"app\", \"\") // Numeric Application ID. Not the same as \"ApplicationProtocol\".\n, AppCategoryName = extract(@'^[\"]([a-zA-Z-]+)', 1, column_ifexists(\"appcat\", \"\")) // Application Category from App Control\n, AppIDName = extract(@' (.*) --', 1, column_ifexists(\"appcat\", \"\")) // Application Name from App Control\n, AppSignatureName = extract(@'.*-- (.*\\\\S)\"', 1, column_ifexists(\"appcat\", \"\")) // Application Signature Name from App Control\n, catid = column_ifexists(\"catid\", \"\") // Application Category ID\n, sid = column_ifexists(\"sid\", \"\") // Application Signature ID\n, appid = column_ifexists(\"appid\", \"\") // Application ID from App Control\n, IPSFullString = column_ifexists(\"ipscat\", \"\") // Application ID from App Control\n, ipscat = extract(@'^[\"]([a-zA-Z-]+)', 1, column_ifexists(\"ipscat\", \"\")) // IPS Category/Signature\n, IPSSignatureName = extract(@'[ ](.*)\\\\S', 1, column_ifexists(\"ipscat\", \"\")) // IPS Signature name\n, spycat = column_ifexists(\"spycat\", \"\") // // Anti-Spyware Category.\n, CaptureATPVerdict = extract(@'Gateway Anti-Virus Status: (.*)\\\\. ', 1, column_ifexists(\"Message\", \"\")) // // Capture ATP Verdict from the Message.\n, arg = column_ifexists(\"arg\", \"\") // URL. Represents the URL path name.\n, FileIdentifier = column_ifexists(\"fileid\", \"\") // File hash or URL.\n, dpi = column_ifexists(\"dpi\", \"\") // Indicates a flow was inspected by DPI. Applies only to Connection Closed messages.\n, dpt = column_ifexists(\"dpt\", \"\") // Destination port\n, dnpt = column_ifexists(\"dnpt\", \"\") // NAT'ed destination port\n, spt = column_ifexists(\"spt\", \"\") // Source port\n, snpt = column_ifexists(\"snpt\", \"\") // NAT'ed source port\n, bid = column_ifexists(\"bid\", \"\") // Blade ID\n// Handle parsing of \"Reason\" to new CFS columns.\n, CFSBlockCategoryID = extract(@'(\\\\d+)\\\\s', 1, column_ifexists(\"CFSBlockFullString\", \"\")) // Application Name from App Control\n, CFSBlockCategoryName = extract(@'.*-(\"(.*))', 1, column_ifexists(\"CFSBlockFullString\", \"\")) // Application Name from App Control\n, CFSPolicyName = extract(@'Policy: (.*), Info:', 1, column_ifexists(\"LogMsgNote\", \"\"))\n// Configuration Auditing Tags\n, auditId = column_ifexists(\"auditId\", \"\") // Audit ID of the Configuration Auditing event.\n, tranxId = column_ifexists(\"tranxId\", \"\") // Transaction ID of the entries pertaining to the same transaction or batch.\n, userMode = column_ifexists(\"userMode\", \"\") // User Mode. Displays the privileges assigned to a user.\n, grpName = column_ifexists(\"grpName\", \"\") // Labels a group of data usually associated with a table (ex: VPN Policy list, Syslog Server list, etc.)\n, grpIndex = column_ifexists(\"grpIndex\", \"\") // Labels the instance of the data group (ex: a VPN policy name, Syslog server entry in the list, etc.)\n, oldValue = column_ifexists(\"oldValue\", \"\") // The previous value associated with the auditing event.\n, newValue = column_ifexists(\"newValue\", \"\") // The new value associated with the auditing event.\n, auditTime = column_ifexists(\"auditTime\", \"\") // The timestamp indicates the time configuration was changed.\n, auditPath = column_ifexists(\"auditPath\", \"\") // The logical location of the configuration setting.\n// Renaming the columns above to create a consistent set of columns with friendlier names.\n| project-rename\n  ReceivedPackets_Field = FieldDeviceCustomNumber1Label // FieldDeviceCustomNumberXLabel (cnXLabel=)\n, ReceivedPackets = DeviceCustomNumber1Label // DeviceCustomNumberXLabel (cnXLabel=)\n, SentPackets_Field = FieldDeviceCustomNumber2Label // FieldDeviceCustomNumberXLabel (cnXLabel=)\n, SentPackets = DeviceCustomNumber2Label // DeviceCustomNumberXLabel (cnXLabel=)\n, ConnectionDuration = DeviceCustomNumber3Label\n, FirewallAction = fw_action // Firewall Action, such as drop, forward, mgmt, NA\n, UserName = susr // Logged-in username associated with the log event.\n, SourceIPv6Address = srcV6 // Source IPv6 IP\n, DestinationIPv6Address = dstV6 // Destination IPv6 IP\n, ServiceName = appName // Non-signature Application name that matches the Application ID \"app\" or \"f\".\n, AppFullString = appcat // The full \"<CATEGORY> <APPNAME> -- <SIGNAME>\" string.\n, AppIDNumber = app // Numeric Application ID. Not the same as \"ApplicationProtocol\".\n, AppID = appid // Application ID from App Control\n, AppCategoryID = catid // Application Category ID\n, AppSignatureID = sid // Application Signature ID\n, IPSCategoryName = ipscat // IPS Category Name\n, AntiSpywareCategory = spycat // Anti-Spyware Category\n, URLPathName = arg // URL. Represents the URL path name.\n, DPIInspectedFlow = dpi // Indicates a flow was inspected by DPI. Applies only to Connection Closed messages.\n, DestinationPortDPT = dpt // Destination port\n, NATDestinationPort = dnpt // NAT'ed destination port\n, SourcePortSPT = spt // Source port\n, NATSourcePort = snpt // NAT'ed source port\n, BladeID = bid // Blade ID\n// Configuration Auditing Tags\n, AuditID = auditId // Audit ID of the Configuration Auditing event.\n, AuditTransactionID = tranxId // Transaction ID of the entries pertaining to the same transaction or batch.\n, AuditUserPrivileges = userMode // User Mode. Displays the privileges assigned to a user.\n, AuditGroupName = grpName // Labels a group of data usually associated with a table (ex: VPN Policy list, Syslog Server list, etc.)\n, AuditGroupIndex = grpIndex // Labels the instance of the data group (ex: a VPN policy name, Syslog server entry in the list, etc.)\n, AuditOldValue = oldValue // The previous value associated with the auditing event.\n, AuditNewValue = newValue // The new value associated with the auditing event.\n, AuditTime = auditTime // The timestamp indicates the time configuration was changed.\n, AuditPath = auditPath // The logical location of the configuration setting.\n// Removing the older column names that were replaced with friendly names.\n| project-away\n  CEFLogMsgSeverity\n, AdditionalExtensions\n, DeviceEventCategory\n, KeyValuePairs\n, gcat\n, RequestMethod\n, ipspri\n// Reorder the remaining columns into a meaningful order.\n| project-reorder\n  TimeGenerated\n, DeviceVendor\n, DeviceModel\n, SerialNumber\n, FirmwareVersion\n, LogMsgID\n, LogMsgCategory\n, LegacyMessageCategory\n, LogMsgSeverity\n, Activity\n, Message\n, LogMsgNote\n, CFSBlockCategoryID\n, CFSBlockCategoryName\n, CFSBlockFullString\n, CFSPolicyName\n, RequestURL\n, DPISSLURL\n, SourceIP\n, NATSourceIPAddress\n, SourceIPv6Address\n, SourcePort\n, SourcePortSPT\n, NATSourcePort\n, SourceDnsDomain\n, SourceMACAddress\n, InboundInterface\n, SourceZone\n, SourceVPNPolicyName\n, DestinationIP\n, NATDestinationIPAddress\n, DestinationIPv6Address\n, DestinationPort\n, DestinationPortDPT\n, NATDestinationPort\n, DestinationDnsDomain\n, DestinationMACAddress\n, OutboundInterface\n, DestinationZone\n, DestinationVPNPolicyName\n, Protocol\n, ServiceName\n, BladeID\n, ICMPType\n, ICMPCode\n, DPIInspectedFlow\n, ApplicationID\n, AppIDNumber\n, AppCategoryID\n, AppCategoryName\n, AppID\n, AppIDName\n, AppSignatureID\n, AppSignatureName\n, AppFullString\n, IPSCategoryName\n, IPSSignatureName\n, IPSPriority\n, IPSFullString\n, AntiSpywareCategory\n, AntiSpywarePriority\n, FileIdentifier\n, CaptureATPVerdict\n, FirewallAction\n, RuleDetails\n, EventCount\n, ReceivedPackets\n, SentPackets\n, ConnectionDuration\n, HTTPRequestMethod\n, URLPathName\n, UserName\n, UserSessionType\n, UserSessionDuration\n, AuditID\n, AuditTransactionID\n, AuditUserPrivileges\n, AuditGroupName\n, AuditGroupIndex\n, AuditOldValue\n, AuditNewValue\n, AuditTime\n, AuditPath\n};\nNetworkParserSonicWallFirewall",
            "version": 1
          }
        }
      ]
    }
  ]
}