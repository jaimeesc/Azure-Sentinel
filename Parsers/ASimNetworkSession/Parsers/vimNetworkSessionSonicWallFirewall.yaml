Parser:
  Title: Network Session ASIM filtering parser for SonicWall firewalls
  Version: '0.1'
  LastUpdated: June 30, 2023
Product:
  Name: SonicWall
Normalization:
  Schema: NetworkSession
  Version: '0.2.6'
References:
  - Title: ASIM Network Session Schema
    Link: https://aka.ms/ASimNetworkSessionDoc
  - Title: ASIM
    Link: https://aka.ms/AboutASIM
Description: |
  This ASIM parser supports filtering and normalizing SonicWall SonicOS ArcSight-formatted syslog data ingested by the Microsoft Sentinel to the ASIM Network Session normalized schema.
ParserName: vimNetworkSessionSonicWallFirewall
EquivalentBuiltInParser: _Im_NetworkSession_SonicWallFirewall
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: ipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstportnumber
    Type: int
    Default: int(null)
  - Name: hostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: dvcaction
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let Actions=datatable(fw_action:string,DvcAction:string)
  [ "reset client","Reset Source"
  , "reset server","Reset Destination"
  , "reset both", "Reset" 
  , "allow","Allow"
  , "\"forward\"","Allow"
  , "\"mgmt\"","Management"
  , "\"NA\"","NA"
  , "deny","Deny"
  , "\"drop\"", "Drop"
  , "drop ICMP", "Drop ICMP"];
  let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); 
  let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix);  
  let Parser=(starttime:datetime=datetime(null), endtime:datetime=datetime(null), srcipaddr_has_any_prefix:dynamic=dynamic([]), dstipaddr_has_any_prefix:dynamic=dynamic([]), ipaddr_has_any_prefix:dynamic=dynamic([]), dstportnumber:int=int(null), hostname_has_any:dynamic=dynamic([]), dvcaction:dynamic=dynamic([]), eventresult:string='*', disabled:bool=false){
  CommonSecurityLog
  | where (isnull(starttime) or TimeGenerated >= starttime) and (isnull(endtime) or TimeGenerated <= endtime)
  | where not(disabled)
  | where DeviceVendor == "SonicWall"
  | where ( isnotempty(SourceIP) or isnotempty(DestinationIP) )
  | where (isnull(dstportnumber) or DestinationPort == dstportnumber) and (array_length(hostname_has_any) == 0)
  | extend
      temp_SrcMatch=has_any_ipv4_prefix(SourceIP, src_or_any)
    , temp_DstMatch=has_any_ipv4_prefix(DestinationIP, dst_or_any)
  // Filter by source/dest. https://learn.microsoft.com/en-us/azure/sentinel/normalization-schema-network
  | extend ASimMatchingIpAddr=case(
                                array_length(src_or_any) == 0 and array_length(dst_or_any) == 0 , "-",
                                temp_SrcMatch and temp_DstMatch, "Both",
                                temp_SrcMatch, "SrcIpAddr",
                                temp_DstMatch, "DstIpAddr",
                                "No match"
                            )
    | where ASimMatchingIpAddr != "No match" 
    | project-away temp_*
  | parse-kv AdditionalExtensions as (['gcat']:string, ['snpt']:string, ['dnpt']:string, ['susr']:string,['appName']:string, ['appcat']:string, ['appid']:string, ['sid']:string, ['catid']:string, ['ipscat']:string, ['ipspri']:string, ['spycat']:string, ['spypri']:string, ['fw_action']:string, ['dpi']:string, ['bid']:string) with (pair_delimiter=";", kv_delimiter="=")
  | extend RequestURL_ = extract(@"(?:[.*;]+?)(?P<url>[a-zA-Z0-9_*.,}{&%$~:;\-=\/?[:space:]]+)(?:;fw_action)", 1, AdditionalExtensions)
  | extend RequestURL_ = iif(RequestURL_ startswith "snpt" or RequestURL_ startswith "dnpt" or RequestURL_ startswith "appid" or RequestURL_ startswith "appName", extract(@"(?:\d;|.{1}\w.{1};)(?P<url>[a-zA-Z0-9_*.,}{&%$~:;\-=\/?[:space:]]+)", 1, RequestURL_), RequestURL_)
  | extend RequestURL_ = iif(RequestURL_ matches regex @"^(.{2,6}=.{1,6})", extract(@"(?:\d;|.{1}\w.{1};)(?P<url>[a-zA-Z0-9_*.,}{&%$~:;\-=\/?[:space:]]+)", 1, RequestURL_), iif(RequestURL_ matches regex @"^\w=\d$", "", RequestURL_))
  | extend fw_action = column_ifexists("fw_action", "") // Firewall Action, such as drop, forward, mgmt, NA
  | lookup Actions on fw_action
    | where (array_length(dvcaction) == 0 or DvcAction has_any(dvcaction))
  // Sets the mandatory EventResult based on the DvcAction.
  | extend EventResult = case(DvcAction == "Allow", "Success",
                            DvcAction == "Management", "NA",
                            DvcAction == "NA", "NA",
                            "Failure"
                            )
  | where (eventresult == "*" or eventresult == "" or (eventresult has_any("Success", "Failure", "NA") and EventResult has eventresult))
  // This adds a column for LogMsgSeverity, using case() to map the ingested LogSeverity int value to a friendly string.
  | extend LogMsgSeverity = case(LogSeverity == 10, "Emergency (0)",
                                              LogSeverity == 9, "Alert (1)",
                                              LogSeverity == 8, "Critical (2)",
                                              LogSeverity == 7, "Error (3)",
                                              LogSeverity == 6, "Warning (4)",
                                              LogSeverity == 5, "Notice (5)",
                                              LogSeverity == 4, "Info (6)/Debug (7)",
                                              LogSeverity == 3, "Not Mapped (3)",
                                              LogSeverity == 2, "Not Mapped (2)",
                                              LogSeverity == 1, "Not Mapped (1)",
                                              "Not Mapped"
                                              )
  // This adds a column for the HTTP "RequestMethod" column, using case() to map the ingested RequestMethod int value to a friendly string.
  | extend HTTPRequestMethod = case(RequestMethod == 0, "No Operation (0)",
                                              RequestMethod == 1, "HTTP GET (1)",
                                              RequestMethod == 2, "HTTP POST (2)",
                                              RequestMethod == 3, "HTTP HEAD (3)",
                                              ""
                                              )
  // Renaming columns to friendlier names.
  | project-rename
    EventResourceId = _ResourceId
    , DeviceModel = DeviceProduct
    , FirmwareVersion = DeviceVersion
    , SerialNumber = Computer
    , LogMsgID = DeviceEventClassID
    , CEFLogMsgSeverity = LogSeverity
    , OutboundInterface = DeviceOutboundInterface
    , InboundInterface = DeviceInboundInterface
    , ApplicationID = ApplicationProtocol // Application ID number (when Flow Reporting is enabled).
    , CFSBlockFullString = Reason // CFS Block Category ID and Name
    // DeviceCustomStringX (csX=)
    , RuleDetails = DeviceCustomString1 // Rule ID. Identify a policy or rule associated with an event.
    , SourceVPNPolicyName = DeviceCustomString2 // Displays the source VPN policy name associated with the event.
    , DestinationVPNPolicyName = DeviceCustomString3 // Displays the destination VPN policy name associated with the event.
    , InterfaceStatistics = DeviceCustomString4 // Displays interface statistics.
    , SoleraNPCSURL = DeviceCustomString5 // URL. Applicable only when NPCS Solera is enabled. Displays the URL of an NPCS object.
    , LogMsgNote = DeviceCustomString6 // "Note" field. Additional information that is application-dependent.
    // DeviceCustomStringXLabel (csXLabel=)
    , NATSourceIPAddress = DeviceCustomString1Label // NAT'ed source IP4/IPv6 address.
    , NATDestinationIPAddress = DeviceCustomString2Label // NAT'ed destination IPv4/IPv6 address.
    , SourceZone = DeviceCustomString3Label // Source Zone on Gen7. Src Zone Type on Gen6.
    , DestinationZone = DeviceCustomString4Label // Destination Zone on Gen7. Dest Zone Type (Trusted/Untrusted, etc.) on Gen6.
    , UserSessionType = DeviceCustomString5Label // String indicating the user session type, determined by the auth mechanism.
    , UserSessionDuration = DeviceCustomString6Label // User session duration in seconds.
    // FieldDeviceCustomNumberX (cnX=)
    , ICMPType = FieldDeviceCustomNumber1 // ICMP Type
    , ICMPCode = FieldDeviceCustomNumber2 // ICMP Code
  // Handle the log group category mapping to a friendly value.
  | extend
      gcat = column_ifexists("gcat", 0) // If column doesn't exist, creates the column and sets it to 0. Also avoids errors if returned query is empty.
    , appcat = column_ifexists("appcat", "") // Application Category from App Control. Sets an empty appcat column if column doesn't exist.
    , ipspri = column_ifexists("ipspri", "")
    , spypri = column_ifexists("spypri", "")
  | extend LogMsgCategory = case(gcat == 1, "System (1)",
                                                gcat == 2, "Log (2)",
                                                gcat == 3, "Security Services (3)",
                                                gcat == 4, "Users (4)",
                                                gcat == 5, "Firewall Settings (5)",
                                                gcat == 6, "Network (6)",
                                                gcat == 7, "VPN (7)",
                                                gcat == 8, "High Availability (8)",
                                                gcat == 9, "3G/4G, Modem, and Module (9)",
                                                gcat == 10, "Firewall (10)",
                                                gcat == 11, "Wireless (11)",
                                                gcat == 12, "VoIP (12)",
                                                gcat == 13, "SSL VPN (13)",
                                                gcat == 14, "Anti-Spam (14)",
                                                gcat == 15, "WAN Acceleration (15)",
                                                gcat == 16, "Object (16)",
                                                gcat == 17, "SD-WAN (17)",
                                                gcat == 18, "Multi-Instance (18)",
                                                gcat == 19, "Unified Policy Engine (19)",
                                                "Log Category Not Mapped"
                                                )
  // Handle mapping of the legacy category if one is assigned.
  | extend LegacyMessageCategory = case(DeviceEventCategory == 0, "None (0)",
                                              DeviceEventCategory == 1, "System Maintenance (1)",
                                              DeviceEventCategory == 2, "System Errors (2)",
                                              DeviceEventCategory == 4, "Blocked Web Sites (4)",
                                              DeviceEventCategory == 8, "Blocked Java Etc. (8)",
                                              DeviceEventCategory == 16, "User Activity (16)",
                                              DeviceEventCategory == 32, "Attacks (32)",
                                              DeviceEventCategory == 64, "Dropped TCP (64)",
                                              DeviceEventCategory == 128, "Dropped UDP (128)",
                                              DeviceEventCategory == 256, "Dropped ICMP (256)",
                                              DeviceEventCategory == 512, "Network Debug (512)",
                                              DeviceEventCategory == 1024, "Connection Closed (1024)",
                                              DeviceEventCategory == 2048, "Dropped LAN TCP (2048)",
                                              DeviceEventCategory == 4096, "Dropped LAN UDP (4096)",
                                              DeviceEventCategory == 8192, "Dropped LAN ICMP (8192)",
                                              DeviceEventCategory == 32768, "Modem Debug (32768)",
                                              DeviceEventCategory == 65536, "VPN Tunnel Status (65536)",
                                              DeviceEventCategory == 131072, "IEEE 802.11 Management (131072)",
                                              DeviceEventCategory == 262144, "Connection Opened (262144)",
                                              DeviceEventCategory == 524288, "System Environment (524288)",
                                              DeviceEventCategory == 1048576, "Expanded - VoIP Activity (1048576)",
                                              DeviceEventCategory == 2097152, "Expanded - WLAN IDS Activity (2097152)",
                                              DeviceEventCategory == 4194304, "Expanded - SonicPoint Activity (4194304)",
                                              DeviceEventCategory == 8388608, "Expanded - Unified Policy Engine (8388608)",
                                              "Legacy Category Not Mapped"
                                              )
  // This adds a column for the IPS Priority level, using case() to map the ingested int value to a friendly string.
  | extend IPSPriority = case(ipspri == 1, "High (1)",
                                              ipspri == 2, "Medium (2)",
                                              ipspri == 3, "Low (3)",
                                              ""
                                              )
  // This adds a column for the Anti-Spyware Priority level, using case() to map the ingested int value to a friendly string.
  | extend AntiSpywarePriority = case(spypri == 1, "High (1)",
                                              spypri == 2, "Medium (2)",
                                              spypri == 3, "Low (3)",
                                              ""
                                              )
  // Creating a consistent set of columns that can be used later in the query and removed from view at the end.
  | extend
      EventProduct = "SonicOS"
    , EventVendor = DeviceVendor
    , Dvc = SerialNumber
    , FieldDeviceCustomNumber1Label = column_ifexists("FieldDeviceCustomNumber1Label", "") // FieldDeviceCustomNumberXLabel (cnXLabel=)
    , FieldDeviceCustomNumber2Label = column_ifexists("FieldDeviceCustomNumber2Label", "") // FieldDeviceCustomNumberXLabel (cnXLabel=)
    , DeviceCustomNumber1Label = column_ifexists("DeviceCustomNumber1Label", "") // DeviceCustomNumberXLabel (cnXLabel=)
    , DeviceCustomNumber2Label = column_ifexists("DeviceCustomNumber2Label", "") // DeviceCustomNumberXLabel (cnXLabel=)
    , DeviceCustomNumber3Label = column_ifexists("DeviceCustomNumber3Label", "") // Connection Duration in milliseconds (for Connnection Closed msgs)
    , susr = column_ifexists("susr", "") // Logged-in username associated with the log event.
    , srcV6 = column_ifexists("srcV6", "") // Source IPv6 IP
    , dstV6 = column_ifexists("dstV6", "") // Destination IPv6 IP
    , appName = column_ifexists("appName", "") // Non-signature Application name that matches the Application ID "app" or "f".
    , app = column_ifexists("app", "") // Numeric Application ID. Not the same as "ApplicationProtocol".
    , AppCategoryName = extract(@'^["]([a-zA-Z-]+)', 1, column_ifexists("appcat", "")) // Application Category from App Control
    , AppIDName = extract(@' (.*) --', 1, column_ifexists("appcat", "")) // Application Name from App Control
    , AppSignatureName = extract(@'.*-- (.*\S)"', 1, column_ifexists("appcat", "")) // Application Signature Name from App Control
    , catid = column_ifexists("catid", "") // Application Category ID
    , sid = column_ifexists("sid", "") // Application Signature ID
    , appid = column_ifexists("appid", "") // Application ID from App Control
    , IPSFullString = column_ifexists("ipscat", "") // Application ID from App Control
    , ipscat = extract(@'^["]([a-zA-Z-]+)', 1, column_ifexists("ipscat", "")) // IPS Category/Signature
    , IPSSignatureName = extract(@'[ ](.*)\S', 1, column_ifexists("ipscat", "")) // IPS Signature name
    , spycat = column_ifexists("spycat", "") // // Anti-Spyware Category.
    , CaptureATPVerdict = extract(@'Gateway Anti-Virus Status: (.*)\. ', 1, column_ifexists("Message", "")) // // Capture ATP Verdict from the Message.
    , arg = column_ifexists("arg", "") // URL. Represents the URL path name.
    , FileIdentifier = column_ifexists("fileid", "") // File hash or URL.
    , dpi = column_ifexists("dpi", "") // Indicates a flow was inspected by DPI. Applies only to Connection Closed messages.
    , dpt = column_ifexists("dpt", "") // Destination port
    , dnpt = column_ifexists("dnpt", "") // NAT'ed destination port
    , spt = column_ifexists("spt", "") // Source port
    , snpt = column_ifexists("snpt", "") // NAT'ed source port
    , bid = column_ifexists("bid", "") // Blade ID
    // Handle parsing of "Reason" to new CFS columns.
    , CFSBlockCategoryID = extract(@'(\d+)\s', 1, column_ifexists("CFSBlockFullString", "")) // Application Name from App Control
    , CFSBlockCategoryName = extract(@'.*-("(.*))', 1, column_ifexists("CFSBlockFullString", "")) // Application Name from App Control
    , CFSPolicyName = extract(@'Policy: (.*), Info:', 1, column_ifexists("LogMsgNote", ""))
    // Configuration Auditing Tags
    , auditId = column_ifexists("auditId", "") // Audit ID of the Configuration Auditing event.
    , tranxId = column_ifexists("tranxId", "") // Transaction ID of the entries pertaining to the same transaction or batch.
    , userMode = column_ifexists("userMode", "") // User Mode. Displays the privileges assigned to a user.
    , grpName = column_ifexists("grpName", "") // Labels a group of data usually associated with a table (ex: VPN Policy list, Syslog Server list, etc.)
    , grpIndex = column_ifexists("grpIndex", "") // Labels the instance of the data group (ex: a VPN policy name, Syslog server entry in the list, etc.)
    , oldValue = column_ifexists("oldValue", "") // The previous value associated with the auditing event.
    , newValue = column_ifexists("newValue", "") // The new value associated with the auditing event.
    , auditTime = column_ifexists("auditTime", "") // The timestamp indicates the time configuration was changed.
    , auditPath = column_ifexists("auditPath", "") // The logical location of the configuration setting.
    , EventStartTime = coalesce(todatetime(StartTime), datetime(null))
    , EventEndTime = coalesce(todatetime(EndTime), datetime(null))
    , EventType = "NetworkSession"
    , EventSchemaVersion = "0.2.6"
    , EventSchema = "NetworkSession"
    , EventCount = toint(1)
    , ThreatConfidence = toint(column_ifexists("ThreatConfidence", int(null)))
  // Renaming the columns above to create a consistent set of columns with friendlier names.
  | project-rename
      ReceivedPackets_Field = FieldDeviceCustomNumber1Label // FieldDeviceCustomNumberXLabel (cnXLabel=)
    , ReceivedPackets = DeviceCustomNumber1Label // DeviceCustomNumberXLabel (cnXLabel=)
    , SentPackets_Field = FieldDeviceCustomNumber2Label // FieldDeviceCustomNumberXLabel (cnXLabel=)
    , SentPackets = DeviceCustomNumber2Label // DeviceCustomNumberXLabel (cnXLabel=)
    , ConnectionDuration = DeviceCustomNumber3Label
    , FirewallAction = fw_action // Firewall Action, such as drop, forward, mgmt, NA
    , UserName = susr // Logged-in username associated with the log event.
    , SourceIPv6Address = srcV6 // Source IPv6 IP
    , DestinationIPv6Address = dstV6 // Destination IPv6 IP
    , ServiceName = appName // Non-signature Application name that matches the Application ID "app" or "f".
    , AppFullString = appcat // The full "<CATEGORY> <APPNAME> -- <SIGNAME>" string.
    , AppIDNumber = app // Numeric Application ID. Not the same as "ApplicationProtocol".
    , AppID = appid // Application ID from App Control
    , AppCategoryID = catid // Application Category ID
    , AppSignatureID = sid // Application Signature ID
    , IPSCategoryName = ipscat // IPS Category Name
    , AntiSpywareCategory = spycat // Anti-Spyware Category
    , URLPathName = arg // URL. Represents the URL path name.
    , DPIInspectedFlow = dpi // Indicates a flow was inspected by DPI. Applies only to Connection Closed messages.
    , DestinationPortDPT = dpt // Destination port
    , NATDestinationPort = dnpt // NAT'ed destination port
    , SourcePortSPT = spt // Source port
    , NATSourcePort = snpt // NAT'ed source port
    , BladeID = bid // Blade ID
    // Configuration Auditing Tags
    , AuditID = auditId // Audit ID of the Configuration Auditing event.
    , AuditTransactionID = tranxId // Transaction ID of the entries pertaining to the same transaction or batch.
    , AuditUserPrivileges = userMode // User Mode. Displays the privileges assigned to a user.
    , AuditGroupName = grpName // Labels a group of data usually associated with a table (ex: VPN Policy list, Syslog Server list, etc.)
    , AuditGroupIndex = grpIndex // Labels the instance of the data group (ex: a VPN policy name, Syslog server entry in the list, etc.)
    , AuditOldValue = oldValue // The previous value associated with the auditing event.
    , AuditNewValue = newValue // The new value associated with the auditing event.
    , AuditTime = auditTime // The timestamp indicates the time configuration was changed.
    , AuditPath = auditPath // The logical location of the configuration setting.
  // Removing the older column names that were replaced with friendly names.
  | project-away
      CEFLogMsgSeverity
    , DeviceEventCategory
    , gcat
    , RequestMethod
    , ipspri
    , spypri
  // Reorder the remaining columns into a meaningful order.
  | project-reorder
      TimeGenerated
    , DeviceVendor
    , DeviceModel
    , SerialNumber
    , FirmwareVersion
    , EventProduct
    , LogMsgID
    , LogMsgCategory
    , LegacyMessageCategory
    , LogMsgSeverity
    , Activity
    , Message
    , LogMsgNote
    , CFSBlockCategoryID
    , CFSBlockCategoryName
    , CFSBlockFullString
    , CFSPolicyName
    , RequestURL
    , SourceIP
    , NATSourceIPAddress
    , SourceIPv6Address
    , SourcePort
    , SourcePortSPT
    , NATSourcePort
    , SourceDnsDomain
    , SourceMACAddress
    , InboundInterface
    , SourceZone
    , SourceVPNPolicyName
    , DestinationIP
    , NATDestinationIPAddress
    , DestinationIPv6Address
    , DestinationPort
    , DestinationPortDPT
    , NATDestinationPort
    , DestinationDnsDomain
    , DestinationMACAddress
    , OutboundInterface
    , DestinationZone
    , DestinationVPNPolicyName
    , Protocol
    , ServiceName
    , BladeID
    , ICMPType
    , ICMPCode
    , DPIInspectedFlow
    , ApplicationID
    , AppIDNumber
    , AppCategoryID
    , AppCategoryName
    , AppID
    , AppIDName
    , AppSignatureID
    , AppSignatureName
    , AppFullString
    , IPSCategoryName
    , IPSSignatureName
    , IPSPriority
    , IPSFullString
    , AntiSpywareCategory
    , AntiSpywarePriority
    , FileIdentifier
    , CaptureATPVerdict
    , FirewallAction
    , RuleDetails
    , EventCount
    , ReceivedPackets
    , SentPackets
    , ConnectionDuration
    , HTTPRequestMethod
    , URLPathName
    , UserName
    , UserSessionType
    , UserSessionDuration
    , AuditID
    , AuditTransactionID
    , AuditUserPrivileges
    , AuditGroupName
    , AuditGroupIndex
    , AuditOldValue
    , AuditNewValue
    , AuditTime
    , AuditPath
  };
  Parser(starttime, endtime, srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix, dstportnumber, hostname_has_any, dvcaction, eventresult, disabled)
