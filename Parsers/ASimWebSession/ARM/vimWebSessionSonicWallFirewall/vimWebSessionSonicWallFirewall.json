{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('Workspace')]",
      "location": "[parameters('WorkspaceRegion')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "vimWebSessionSonicWallFirewall",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('Workspace'))]"
          ],
          "properties": {
            "etag": "*",
            "displayName": "Web Session ASIM filtering parser for SonicWall firewalls.",
            "category": "ASIM",
            "FunctionAlias": "vimWebSessionSonicWallFirewall",
            "query": "let parser=(\n  starttime:datetime=datetime(null),\n  endtime:datetime=datetime(null),\n  srcipaddr_has_any_prefix:dynamic=dynamic([]),\n  dstipaddr_has_any_prefix:dynamic=dynamic([]),\n  ipaddr_has_any_prefix:dynamic=dynamic([]), \n  url_has_any:dynamic=dynamic([]),\n  httpuseragent_has_any:dynamic=dynamic([]),\n  eventresult:string='*',\n  disabled:bool=false\n  )\n  {\n    let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix);\n    let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix);\n    let ip_any = set_union(srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix);\n    let Actions=datatable(fw_action:string, DvcAction:string, EventSeverity:string)\n      [ \"reset client\", \"Reset Source\", \"Low\"\n      , \"reset server\", \"Reset Destination\", \"Low\"\n      , \"reset both\", \"Reset\", \"Low\"\n      , \"allow\", \"Allow\", \"Informational\"\n      , \"\\\"forward\\\"\", \"Allow\", \"Informational\"\n      , \"\\\"mgmt\\\"\", \"Management\", \"Informational\"\n      , \"\\\"NA\\\"\", \"NA\", \"Informational\"\n      , \"deny\", \"Deny\", \"Low\"\n      , \"\\\"drop\\\"\", \"Drop\", \"Low\"\n      , \"drop ICMP\", \"Drop ICMP\", \"Low\"\n    ];\n    CommonSecurityLog\n    | where not(disabled)\n    | where DeviceVendor == \"SonicWall\"\n    | where (isnull(starttime) or TimeGenerated >= starttime) and (isnull(endtime) or TimeGenerated <= endtime)\n    | where (isnotempty(SourceIP) or isnotempty(DestinationIP))\n    | extend temp_SrcMatch = has_any_ipv4_prefix(SourceIP, src_or_any)\n      , temp_DstMatch = has_any_ipv4_prefix(DestinationIP, dst_or_any)\n    | extend ASimMatchingIpAddr = case(array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\",\n                                      temp_SrcMatch and temp_DstMatch, \"Both\",\n                                      temp_SrcMatch, \"SrcIpAddr\",\n                                      temp_DstMatch, \"DstIpAddr\",\n                                      \"No match\")\n    | where ASimMatchingIpAddr != \"No match\"\n    | project-away temp_*\n    | where (array_length(url_has_any) == 0 or RequestURL has_any (url_has_any))\n    | where (array_length(httpuseragent_has_any) == 0 or RequestClientApplication has_any (httpuseragent_has_any))\n    | where Protocol has_any(dynamic([\"udp/http\", \"tcp/http\", \"udp/https\", \"tcp/https\"]))\n    | parse-kv AdditionalExtensions as (['gcat']:string, ['snpt']:string, ['dnpt']:string, ['susr']:string,['appName']:string, ['appcat']:string, ['appid']:string, ['sid']:string, ['catid']:string, ['ipscat']:string, ['ipspri']:string, ['spycat']:string, ['spypri']:string, ['fw_action']:string, ['dpi']:string, ['bid']:string, ['af_action']:string, ['af_polid']:string, ['af_policy']:string, ['af_type']:string, ['af_service']:string, ['af_object']:string, ['contentObject']:string, ['fileid']:string) with (pair_delimiter=\";\", kv_delimiter=\"=\")\n    | extend RequestURL_ = extract(@\"(?:[.*;]+?)(?P<url>[a-zA-Z0-9_*.,}{&%$~:;\\-=\\/?[:space:]]+)(?:;fw_action)\", 1, AdditionalExtensions)\n    | extend RequestURL_ = iif(RequestURL_ startswith \"snpt\" or RequestURL_ startswith \"dnpt\" or RequestURL_ startswith \"appid\" or RequestURL_ startswith \"appName\", extract(@\"(?:\\d;|.{1}\\w.{1};)(?P<url>[a-zA-Z0-9_*.,}{&%$~:;\\-=\\/?[:space:]]+)\", 1, RequestURL_), RequestURL_)\n    | extend RequestURL_ = iif(RequestURL_ matches regex @\"^(.{2,6}=.{1,6})\", extract(@\"(?:\\d;|.{1}\\w.{1};)(?P<url>[a-zA-Z0-9_*.,}{&%$~:;\\-=\\/?[:space:]]+)\", 1, RequestURL_), iif(RequestURL_ matches regex @\"^\\w=\\d$\", \"\", RequestURL_))\n    | extend RequestURL_ = iif(RequestURL_ has_any(dynamic([\"af_polid=\", \"ipscat=\", \"snpt=\", \"dnpt=\"])), \"\", RequestURL_)\n    | lookup Actions on fw_action\n    // Sets the mandatory EventResult based on the DvcAction.\n    | extend EventResult = case(DvcAction == \"Allow\", \"Success\",\n          DvcAction == \"Management\", \"NA\",\n          DvcAction == \"NA\", \"NA\",\n          \"Failure\"\n          )\n    | where (eventresult == \"*\" or EventResult has eventresult)\n    | extend LogMsgSeverity = case(LogSeverity == 10, \"Emergency (0)\",\n          LogSeverity == 9, \"Alert (1)\",\n          LogSeverity == 8, \"Critical (2)\",\n          LogSeverity == 7, \"Error (3)\",\n          LogSeverity == 6, \"Warning (4)\",\n          LogSeverity == 5, \"Notice (5)\",\n          LogSeverity == 4, \"Info (6)/Debug (7)\",\n          LogSeverity == 3, \"Not Mapped (3)\",\n          LogSeverity == 2, \"Not Mapped (2)\",\n          LogSeverity == 1, \"Not Mapped (1)\",\n          \"Not Mapped\"\n          )\n    | extend HttpRequestMethod = case(RequestMethod == 0, \"No Operation (0)\",\n                                                RequestMethod == 1, \"HTTP GET (1)\",\n                                                RequestMethod == 2, \"HTTP POST (2)\",\n                                                RequestMethod == 3, \"HTTP HEAD (3)\",\n                                                \"\"\n                                                )\n    | extend NetworkProtocolVersion = case(DestinationIP has \".\", \"IPv4\"\n                                              , DestinationIP has \":\", \"IPv6\"\n                                              , \"\"\n                                              )\n          , NetworkProtocol = toupper(trim_end(@\"/.*\", Protocol))\n    | project-rename\n        EventResourceId = _ResourceId\n        , DstMacAddr = DestinationMACAddress\n        , SrcMacAddr = SourceMACAddress\n        , DstHostname = DestinationHostName\n        , SrcHostname = SourceHostName\n        , DeviceModel = DeviceProduct\n        , FirmwareVersion = DeviceVersion\n        , SerialNumber = Computer\n        , LogMsgID = DeviceEventClassID\n        , CEFLogMsgSeverity = LogSeverity\n        , OutboundInterface = DeviceOutboundInterface\n        , InboundInterface = DeviceInboundInterface\n        , ApplicationID = ApplicationProtocol // Application ID number (when Flow Reporting is enabled).\n        , CFSFullString = Reason // CFS Block Category ID and Name\n        , RuleDetails = DeviceCustomString1 // Rule ID. Identify a policy or rule associated with an event.\n        , SourceVPNPolicyName = DeviceCustomString2 // Displays the source VPN policy name associated with the event.\n        , DestinationVPNPolicyName = DeviceCustomString3 // Displays the destination VPN policy name associated with the event.\n        , InterfaceStatistics = DeviceCustomString4 // Displays interface statistics.\n        , SoleraNPCSURL = DeviceCustomString5 // URL. Applicable only when NPCS Solera is enabled. Displays the URL of an NPCS object.\n        , LogMsgNote = DeviceCustomString6 // \"Note\" field. Additional information that is application-dependent.\n        , NATSourceIPAddress = DeviceCustomString1Label // NAT'ed source IP4/IPv6 address.\n        , NATDestinationIPAddress = DeviceCustomString2Label // NAT'ed destination IPv4/IPv6 address.\n        , SourceZone = DeviceCustomString3Label // Source Zone on Gen7. Src Zone Type on Gen6.\n        , DestinationZone = DeviceCustomString4Label // Destination Zone on Gen7. Dest Zone Type (Trusted/Untrusted, etc.) on Gen6.\n        , UserSessionType = DeviceCustomString5Label // String indicating the user session type, determined by the auth mechanism.\n        , UserSessionDuration = DeviceCustomString6Label // User session duration in seconds.\n        , ICMPType = FieldDeviceCustomNumber1 // ICMP Type\n        , ICMPCode = FieldDeviceCustomNumber2 // ICMP Code\n        , SrcUsername = SourceUserName\n        , ThreatOriginalConfidence = ThreatConfidence\n        , DstNatIpAddr = DestinationTranslatedAddress\n        , DstNatPortNumber = DestinationTranslatedPort\n        , SrcNatIpAddr = SourceTranslatedAddress\n        , SrcNatPortNumber = SourceTranslatedPort\n        , HttpUserAgent = RequestClientApplication\n| extend\n    gcat = column_ifexists(\"gcat\", 0) // If column doesn't exist, creates the column and sets it to 0. Also avoids errors if returned query is empty.\n  , appcat = column_ifexists(\"appcat\", \"\") // Application Category from App Control. Sets an empty appcat column if column doesn't exist.\n  , ipspri = column_ifexists(\"ipspri\", \"\")\n  , spypri = column_ifexists(\"spypri\", \"\")\n| extend LogMsgCategory = case(gcat == 1, \"System (1)\",\n                                              gcat == 2, \"Log (2)\",\n                                              gcat == 3, \"Security Services (3)\",\n                                              gcat == 4, \"Users (4)\",\n                                              gcat == 5, \"Firewall Settings (5)\",\n                                              gcat == 6, \"Network (6)\",\n                                              gcat == 7, \"VPN (7)\",\n                                              gcat == 8, \"High Availability (8)\",\n                                              gcat == 9, \"3G/4G, Modem, and Module (9)\",\n                                              gcat == 10, \"Firewall (10)\",\n                                              gcat == 11, \"Wireless (11)\",\n                                              gcat == 12, \"VoIP (12)\",\n                                              gcat == 13, \"SSL VPN (13)\",\n                                              gcat == 14, \"Anti-Spam (14)\",\n                                              gcat == 15, \"WAN Acceleration (15)\",\n                                              gcat == 16, \"Object (16)\",\n                                              gcat == 17, \"SD-WAN (17)\",\n                                              gcat == 18, \"Multi-Instance (18)\",\n                                              gcat == 19, \"Unified Policy Engine (19)\",\n                                              \"Log Category Not Mapped\"\n                                              )\n| extend LegacyMessageCategory = case(DeviceEventCategory == 0, \"None (0)\",\n                                            DeviceEventCategory == 1, \"System Maintenance (1)\",\n                                            DeviceEventCategory == 2, \"System Errors (2)\",\n                                            DeviceEventCategory == 4, \"Blocked Web Sites (4)\",\n                                            DeviceEventCategory == 8, \"Blocked Java Etc. (8)\",\n                                            DeviceEventCategory == 16, \"User Activity (16)\",\n                                            DeviceEventCategory == 32, \"Attacks (32)\",\n                                            DeviceEventCategory == 64, \"Dropped TCP (64)\",\n                                            DeviceEventCategory == 128, \"Dropped UDP (128)\",\n                                            DeviceEventCategory == 256, \"Dropped ICMP (256)\",\n                                            DeviceEventCategory == 512, \"Network Debug (512)\",\n                                            DeviceEventCategory == 1024, \"Connection Closed (1024)\",\n                                            DeviceEventCategory == 2048, \"Dropped LAN TCP (2048)\",\n                                            DeviceEventCategory == 4096, \"Dropped LAN UDP (4096)\",\n                                            DeviceEventCategory == 8192, \"Dropped LAN ICMP (8192)\",\n                                            DeviceEventCategory == 32768, \"Modem Debug (32768)\",\n                                            DeviceEventCategory == 65536, \"VPN Tunnel Status (65536)\",\n                                            DeviceEventCategory == 131072, \"IEEE 802.11 Management (131072)\",\n                                            DeviceEventCategory == 262144, \"Connection Opened (262144)\",\n                                            DeviceEventCategory == 524288, \"System Environment (524288)\",\n                                            DeviceEventCategory == 1048576, \"Expanded - VoIP Activity (1048576)\",\n                                            DeviceEventCategory == 2097152, \"Expanded - WLAN IDS Activity (2097152)\",\n                                            DeviceEventCategory == 4194304, \"Expanded - SonicPoint Activity (4194304)\",\n                                            DeviceEventCategory == 8388608, \"Expanded - Unified Policy Engine (8388608)\",\n                                            \"Legacy Category Not Mapped\"\n                                            )\n| extend IPSPriority = case(ipspri == 1, \"High (1)\",\n                                            ipspri == 2, \"Medium (2)\",\n                                            ipspri == 3, \"Low (3)\",\n                                            \"\"\n                                            )\n| extend AntiSpywarePriority = case(spypri == 1, \"High (1)\",\n                                      spypri == 2, \"Medium (2)\",\n                                      spypri == 3, \"Low (3)\",\n                                      \"\"\n                                      )\n| extend\n    EventProduct = \"SonicOS\"\n    , EventVendor = DeviceVendor\n    , EventProductVersion = FirmwareVersion\n    , DvcIdType = \"Other\"\n    , Dvc = SerialNumber\n    , DvcIpAddr = SerialNumber\n    , DvcHostname = SerialNumber\n    , Url = RequestURL\n    , Url_ = RequestURL_\n    , FieldDeviceCustomNumber1Label = column_ifexists(\"FieldDeviceCustomNumber1Label\", \"\") // FieldDeviceCustomNumberXLabel (cnXLabel=)\n    , FieldDeviceCustomNumber2Label = column_ifexists(\"FieldDeviceCustomNumber2Label\", \"\") // FieldDeviceCustomNumberXLabel (cnXLabel=)\n    , DeviceCustomNumber1Label = column_ifexists(\"DeviceCustomNumber1Label\", \"\") // DeviceCustomNumberXLabel (cnXLabel=)\n    , DeviceCustomNumber2Label = column_ifexists(\"DeviceCustomNumber2Label\", \"\") // DeviceCustomNumberXLabel (cnXLabel=)\n    , DeviceCustomNumber3Label = column_ifexists(\"DeviceCustomNumber3Label\", \"\") // Connection Duration in milliseconds (for Connnection Closed msgs)\n    , fw_action = column_ifexists(\"fw_action\", \"\") // Firewall Action, such as drop, forward, mgmt, NA\n    , susr = column_ifexists(\"susr\", \"\") // Logged-in username associated with the log event.\n    , af_polid = column_ifexists(\"af_polid\", \"\")\n    , af_action = column_ifexists(\"af_action\", \"\")\n    , af_policy = column_ifexists(\"af_policy\", \"\")\n    , af_service = column_ifexists(\"af_service\", \"\")\n    , af_type = column_ifexists(\"af_type\", \"\")\n    , af_object = column_ifexists(\"af_object\", \"\")\n    , contentObject = column_ifexists(\"contentObject\", \"\") // App Firewall/App Rule Content.\n    , srcV6 = column_ifexists(\"srcV6\", \"\") // Source IPv6 IP\n    , dstV6 = column_ifexists(\"dstV6\", \"\") // Destination IPv6 IP\n    , appName = column_ifexists(\"appName\", \"\") // Non-signature Application name that matches the Application ID \"app\" or \"f\".\n    , app = column_ifexists(\"app\", \"\") // Numeric Application ID. Not the same as \"ApplicationProtocol\".\n    , AppCategoryName = extract(@'^[\"]([a-zA-Z-]+)', 1, column_ifexists(\"appcat\", \"\")) // Application Category from App Control\n    , AppIDName = extract(@' (.*) --', 1, column_ifexists(\"appcat\", \"\")) // Application Name from App Control\n    , AppSignatureName = trim('\"', extract(@'.*-- (.*\\S)', 1, column_ifexists(\"appcat\", \"\"))) // Application Signature Name from App Control\n    , catid = column_ifexists(\"catid\", \"\") // Application Category ID\n    , sid = column_ifexists(\"sid\", \"\") // Application Signature ID\n    , appid = column_ifexists(\"appid\", \"\") // Application ID from App Control\n    , IPSFullString = column_ifexists(\"ipscat\", \"\")\n    , ipscat = extract(@'^[\"]([a-zA-Z-]+)', 1, column_ifexists(\"ipscat\", \"\")) // IPS Category/Signature\n    , IPSSignatureName = extract(@'[ ](.*)\\S', 1, column_ifexists(\"ipscat\", \"\")) // IPS Signature name\n    , spycat = column_ifexists(\"spycat\", \"\") // // Anti-Spyware Category.\n    , FileSize = tolong(column_ifexists(\"FileSize\", long(null)))\n    , FileName = column_ifexists(\"FileName\", \"\")\n    , AppControlFileName = extract(@'.*Filename: (.*)\\\"', 1, column_ifexists(\"Message\", \"\")) // App Control Filename Logging\n    , HttpReferrer = extract(@'Referer: (.*)\\\"$', 1, column_ifexists(\"LogMsgNote\", \"\"))\n    , HttpRequestMethod_ = extract(@'Command: (.\\w+)', 1, column_ifexists(\"LogMsgNote\", \"\"))\n    , CFSCategoryID = extract(@'(\\d+)\\s', 1, column_ifexists(\"CFSFullString\", \"\"))\n    , CFSCategoryName = extract(@'.*-(\"(.*))', 1, column_ifexists(\"CFSFullString\", \"\"))\n    , CFSPolicyName = extract(@'Policy: (.*), Info:', 1, column_ifexists(\"LogMsgNote\", \"\"))\n    , CaptureATPVerdict = extract(@'Gateway Anti-Virus Status: (.*)\\. ', 1, column_ifexists(\"Message\", \"\")) // Capture ATP Verdict from the Message.\n    , Country = extract(@'Country Name:(.*)\\\"$', 1, column_ifexists(\"Message\", \"\"))\n    , arg = column_ifexists(\"arg\", \"\") // URL. Represents the URL path name.\n    , fileid = column_ifexists(\"fileid\", \"\") // File hash or URL.\n    , dpi = column_ifexists(\"dpi\", \"\") // Indicates a flow was inspected by DPI. Applies only to Connection Closed messages.\n    , dpt = column_ifexists(\"dpt\", \"\") // Destination port\n    , dnpt = column_ifexists(\"dnpt\", \"\") // NAT'ed destination port\n    , spt = column_ifexists(\"spt\", \"\") // Source port\n    , snpt = column_ifexists(\"snpt\", \"\") // NAT'ed source port\n    , bid = column_ifexists(\"bid\", \"\") // Blade ID\n    , SrcZone = SourceZone\n    , DstZone = DestinationZone\n    , DvcOriginalAction = DeviceAction\n    , EventOriginalSeverity = CEFLogMsgSeverity\n    , DvcInboundInterface = InboundInterface\n    , DvcOutboundInterface = OutboundInterface\n    , DstIpAddr = DestinationIP\n    , Dst = DestinationIP\n    , DstPortNumber = DestinationPort\n    , SrcIpAddr = SourceIP\n    , Src = SourceIP\n    , IpAddr = SourceIP\n    , SrcPortNumber = SourcePort\n    , EventStartTime = TimeGenerated\n    , EventEndTime = TimeGenerated\n    , EventType = \"HTTPsession\"\n    , EventSchemaVersion = \"0.2.5\"\n    , EventSchema = \"WebSession\"\n    , EventCount = toint(1)\n    , Hostname = DstHostname\n    , UserAgent = HttpUserAgent\n| extend\n    UrlCategory = CFSCategoryName\n    , HttpRequestMethod = coalesce(HttpRequestMethod, HttpRequestMethod_)\n    , SrcUsername = coalesce(susr, SrcUsername)\n    , FileName = coalesce(FileName, AppControlFileName)\n    , NetworkDirection = case(SrcZone == \"\" and DstZone == \"\", \"NA\"\n                              , SrcZone == \"WAN\" and (DstZone == \"WAN\" and DestinationIP !has \".255\"), \"Inbound\"\n                              , SrcZone == \"WAN\" and DstZone == \"WAN\", \"External\"\n                              , SrcZone == \"WAN\" and DstZone != \"WAN\", \"Inbound\"\n                              , SrcZone == \"VPN\" and DstZone == \"WAN\", \"Outbound\"\n                              , SrcZone == \"VPN\" and DstZone != \"WAN\", \"Inbound\"\n                              , DstZone == \"MULTICAST\", \"NA\"\n                              , DstZone == \"WAN\", \"Outbound\"\n                              , \"Local\"\n                              )\n| extend\n    SrcUsernameType = case(SrcUsername has \"=\", \"DN\",\n                                  SrcUsername has \"\\\\\", \"Windows\",\n                                  SrcUsername has \"@\", \"UPN\",\n                                  SrcUsername == \"Unknown (external IP)\", \"\",\n                                  SrcUsername == \"Unknown (SSO bypassed)\", \"\",\n                                  isnotempty(SrcUsername), \"Simple\",\n                                  \"\"\n                                  )\n    , ThreatField = case(isnotempty(ThreatOriginalConfidence) and NetworkDirection == \"Outbound\", \"SrcIpAddr\"\n          , isnotempty(ThreatOriginalConfidence) and NetworkDirection == \"Inbound\", \"DstIpAddr\"\n          , \"\")\n| extend\n      ThreatIpAddr = case(ThreatField == \"SrcIpAddr\", SrcIpAddr\n                          , ThreatField == \"DstIpAddr\", DstIpAddr\n                          , \"\")\n| project-rename\n    ReceivedPackets_Field = FieldDeviceCustomNumber1Label // FieldDeviceCustomNumberXLabel (cnXLabel=)\n  , ReceivedPackets = DeviceCustomNumber1Label // DeviceCustomNumberXLabel (cnXLabel=)\n  , SentPackets_Field = FieldDeviceCustomNumber2Label // FieldDeviceCustomNumberXLabel (cnXLabel=)\n  , SentPackets = DeviceCustomNumber2Label // DeviceCustomNumberXLabel (cnXLabel=)\n  , ConnectionDuration = DeviceCustomNumber3Label\n  , FirewallAction = fw_action // Firewall Action, such as drop, forward, mgmt, NA\n  , User = susr // Logged-in username associated with the log event.\n  , AppRulePolicyId = af_polid // App Rule Policy ID.\n  , AppRulePolicyName = af_policy // App Rule Policy Name.\n  , AppRuleService = af_service // App Rule Service Name.\n  , AppRuleType = af_type // App Rule Policy Type.\n  , AppRuleObject = af_object // App Rule Object Name.\n  , AppRuleObjectContent = contentObject // App Rule Object Content.\n  , AppRuleAction = af_action // App Rule Action.\n  , SourceIPv6Address = srcV6 // Source IPv6 IP\n  , DestinationIPv6Address = dstV6 // Destination IPv6 IP\n  , ServiceName = appName // Non-signature Application name that matches the Application ID \"app\" or \"f\".\n  , AppFullString = appcat // The full \"<CATEGORY> <APPNAME> -- <SIGNAME>\" string.\n  , AppIDNumber = app // Numeric Application ID. Not the same as \"ApplicationProtocol\".\n  , AppID = appid // Application ID from App Control\n  , AppCategoryID = catid // Application Category ID\n  , AppSignatureID = sid // Application Signature ID\n  , IPSCategoryName = ipscat // IPS Category Name\n  , AntiSpywareCategory = spycat // Anti-Spyware Category\n  , URLPathName = arg // URL. Represents the URL path name.\n  , FileIdentifier = fileid // File hash or URL\n  , DPIInspectedFlow = dpi // Indicates a flow was inspected by DPI. Applies only to Connection Closed messages.\n  , DestinationPortDPT = dpt // Destination port\n  , NATDestinationPort = dnpt // NAT'ed destination port\n  , SourcePortSPT = spt // Source port\n  , NATSourcePort = snpt // NAT'ed source port\n  , BladeID = bid // Blade ID\n| project-away\n    CEFLogMsgSeverity\n  , DeviceEventCategory\n  , gcat\n  , RequestMethod\n  , ipspri\n  , spypri\n  , RequestURL\n  , RequestURL_\n  , HttpRequestMethod_\n};\nparser (starttime=starttime, endtime=endtime, dstipaddr_has_any_prefix=dstipaddr_has_any_prefix, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresult=eventresult, disabled=disabled)\n",
            "version": 1,
            "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),dstipaddr_has_any_prefix:dynamic=dynamic([]),ipaddr_has_any_prefix:dynamic=dynamic([]),url_has_any:dynamic=dynamic([]),httpuseragent_has_any:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
          }
        }
      ]
    }
  ]
}